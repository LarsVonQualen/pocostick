import * as mysql from "mysql";
import * as pluralize from "pluralize";
import * as fs from "fs";
var pascalcase = require("pascalcase");

type YesOrNo = "YES" | "NO";

interface IFieldPacket {
    catalog: string;
    charsetNr: number;
    db: string;
    decimals: number;
    default: any;
    flags: number;
    length: number;
    name: string;
    orgName: string;
    protocol41: boolean;
    table: string;
    type: number;
    zeroFill: boolean;
}

interface IRowDataPacket {
    TABLE_CATALOG: string;
    TABLE_SCHEMA: string;
    TABLE_NAME: string;
    COLUMN_NAME: string;
    ORDINAL_POSITION: number;
    COLUMN_DEFAULT: any;
    IS_NULLABLE: YesOrNo;
    DATA_TYPE: string;
    CHARACTER_MAXIMUM_LENGTH: number;
    CHARACTER_OCTET_LENGTH: number;
    NUMERIC_PRECISION?: number;
    NUMERIC_SCALE?: number;
    DATETIME_PRECISION?: number;
    CHARACTER_SET_NAME: string;
    COLLATION_NAME: string;
    COLUMN_TYPE: string;
    COLUMN_KEY: string;
    EXTRA: string;
    PRIVILEGES: string;
    COLUMN_COMMENT: string;
    GENERATION_EXPRESSION: string;
}

class PocoFile {
    constructor(public filename: string, public content: string) {}
}

export default class PocoStick {
    private now = new Date();
    private templateClass = fs.readFileSync("./src/poco.ts", "utf8");
    private templateProperty = [
        "\t\t/**",
        "\t\t * Generated by Pocostick",
        "\t\t *",
        "\t\t * @name {{className}}#{{name}}",
        "\t\t * @type {{type}}{{nullable}}",
        "\t\t * @default {{defaultValue}}",
        "\t\t */",
        "\t\t{{name}}: {{type}};"
    ];

    private tsTypes = {
        number: "number",
        string: "string",
        boolean: "boolean",
        date: "Date"
    };

    private mysqlTypes = {
        // Numbers
        "int": this.tsTypes.number,
        "tinyint": this.tsTypes.number,
        "smallint": this.tsTypes.number,
        "mediumint": this.tsTypes.number,
        "bigint": this.tsTypes.number,
        "float": this.tsTypes.number,
        "double": this.tsTypes.number,
        "decimal": this.tsTypes.number,

        // Dates
        "date": this.tsTypes.date,
        "datetime": this.tsTypes.date,
        "timestamp": this.tsTypes.date,
        "time": this.tsTypes.date,
        "year": this.tsTypes.date,

        // Strings
        "char": this.tsTypes.string,
        "varchar": this.tsTypes.string,
        "text": this.tsTypes.string,
        "tinytext": this.tsTypes.string,
        "mediumtext": this.tsTypes.string,
        "longtext": this.tsTypes.string,

        // Booleans
        "bit": this.tsTypes.boolean
    };

    constructor(public config: mysql.IConnectionConfig, public outputDir = "/", public defaultNamespace = "PocoStick.Models", public logger: (message: string) => void = message => console.log(message)) {

    }

    public generate(dryRun: boolean = false) {
        var connection = mysql.createConnection(this.config);

        connection.connect();

        var sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.config.database}'`;

        connection.query(sql, (err, rows: Array<IRowDataPacket>, fields: Array<IFieldPacket>) => {
            if (err) throw err;

            var tableNames = rows.map(row => row.TABLE_NAME).filter((val, pos, arr) => arr.indexOf(val) === pos);

            var files: Array<PocoFile> = tableNames.map(tableName => this.createFile(rows, tableName));

            if (!dryRun) {
                files.forEach(file => fs.writeFileSync(file.filename, file.content, "utf8"));
            }
        });

        connection.end();
    }

    private static getProperName(tableName: string) {
        return pluralize.singular(pascalcase(tableName));
    }

    private createFile(rows: Array<IRowDataPacket>, tableName: string) {
        var fileName = `${PocoStick.getProperName(tableName)}.ts`;

        this.logger(`Creating file '${fileName}'`);

        return new PocoFile(`${this.outputDir}${fileName}`, this.createClass(rows, tableName));
    }

    private createClass(rows: Array<IRowDataPacket>, tableName: string) {
        var className = PocoStick.getProperName(tableName);

        this.logger(`\tCreating class '${className}'`);

        return this.templateClass
            .replace("POCOSTICK_DEFAULT_NAMESPACE", this.defaultNamespace)
            .replace("POCOSTICK_CLASS_NAME", className)
            .replace("{{now}}", this.now)
            .replace("// POCOSTICK_PROPERTIES", this.createProperties(rows, tableName));
    }

    private createProperties(rows: Array<IRowDataPacket>, tableName: string) {
        var className = PocoStick.getProperName(tableName);

        this.logger(`\t\tCreating properties for class '${className}'`);

        return rows
            .filter(row => row.TABLE_NAME === tableName)
            .map(field => this.createProperty(field, className))
            .join("\r\n");
    }

    private createProperty(row: IRowDataPacket, className: string) {
        var name = PocoStick.getProperName(row.COLUMN_NAME);
        var type = this.mysqlTypes[row.DATA_TYPE];
        var isNullable = row.IS_NULLABLE === "YES";

        this.logger(`\t\tCreating property '${name}' of type '${type}' that ${isNullable ? "IS" : "is not"} nullable.`);

        return this.templateProperty.map(line => {
            if (line.match("{{defaultValue}}") && row.COLUMN_DEFAULT === null) {
                return null;
            }

            return line
                .replace("{{name}}", name)
                .replace("{{type}}", type)
                .replace("{{className}}", className)
                .replace("{{nullable}}", isNullable ? "?" : "")
                .replace("{{defaultValue}}", row.COLUMN_DEFAULT !== null ? row.COLUMN_DEFAULT : "");
        }).filter(line => line !== null).join("\r\n");
    }
}